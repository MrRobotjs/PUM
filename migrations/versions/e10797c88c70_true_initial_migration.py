# File: migrations/versions/e10797c88c70_true_initial_migration.py 

"""True initial migration

Revision ID: e10797c88c70
Revises: 
Create Date: <Your Create Date Will Be Here>

"""
from alembic import op
import sqlalchemy as sa

# ADD THESE IMPORTS AT THE TOP:
from app.models import JSONEncodedDict, SettingValueType, EventType


# revision identifiers, used by Alembic.
revision = 'e10797c88c70' # <<< This should match your filename
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - START ###
    op.create_table('admin_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=True),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('plex_uuid', sa.String(length=255), nullable=True),
    sa.Column('plex_username', sa.String(length=255), nullable=True),
    sa.Column('plex_thumb', sa.String(length=512), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('is_plex_sso_only', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('discord_user_id', sa.String(length=255), nullable=True),
    sa.Column('discord_username', sa.String(length=255), nullable=True),
    sa.Column('discord_avatar_hash', sa.String(length=255), nullable=True),
    sa.Column('discord_access_token', sa.String(length=255), nullable=True),
    sa.Column('discord_refresh_token', sa.String(length=255), nullable=True),
    sa.Column('discord_token_expires_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('plex_uuid')
    )
    with op.batch_alter_table('admin_accounts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_admin_accounts_username'), ['username'], unique=True)

    op.create_table('settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('value_type', sa.Enum(SettingValueType, name='settingvaluetype', create_constraint=True), nullable=False), # CORRECTED
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('settings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_settings_key'), ['key'], unique=True)

    op.create_table('invites',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=64), nullable=False),
    sa.Column('custom_path', sa.String(length=100), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('current_uses', sa.Integer(), nullable=True, server_default=sa.text('0')), # Added server_default
    sa.Column('grant_library_ids', JSONEncodedDict(), nullable=True), # CORRECTED
    sa.Column('created_by_admin_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.true()), # Added server_default
    sa.ForeignKeyConstraint(['created_by_admin_id'], ['admin_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_invites_custom_path'), ['custom_path'], unique=True)
        batch_op.create_index(batch_op.f('ix_invites_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_invites_token'), ['token'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plex_user_id', sa.Integer(), nullable=True),
    sa.Column('plex_username', sa.String(length=255), nullable=False),
    sa.Column('plex_email', sa.String(length=255), nullable=True),
    sa.Column('plex_thumb_url', sa.String(length=512), nullable=True),
    sa.Column('plex_uuid', sa.String(length=255), nullable=False),
    sa.Column('is_home_user', sa.Boolean(), nullable=True, server_default=sa.false()), # Added server_default
    sa.Column('shares_back', sa.Boolean(), nullable=True, server_default=sa.false()),  # Added server_default
    sa.Column('allowed_library_ids', JSONEncodedDict(), nullable=True), # CORRECTED
    sa.Column('allowed_servers', JSONEncodedDict(), nullable=True),     # CORRECTED
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_synced_with_plex', sa.DateTime(), nullable=True),
    sa.Column('last_streamed_at', sa.DateTime(), nullable=True),
    sa.Column('used_invite_id', sa.Integer(), nullable=True),
    sa.Column('discord_user_id', sa.String(length=255), nullable=True),
    sa.Column('discord_username', sa.String(length=255), nullable=True),
    sa.Column('discord_avatar_hash', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['used_invite_id'], ['invites.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_user_id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_plex_user_id'), ['plex_user_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_plex_username'), ['plex_username'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_plex_uuid'), ['plex_uuid'], unique=True)

    op.create_table('history_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('event_type', sa.Enum(EventType, name='eventtype', create_constraint=True), nullable=False), # CORRECTED
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('details', JSONEncodedDict(), nullable=True), # CORRECTED
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('invite_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admin_accounts.id'], ),
    sa.ForeignKeyConstraint(['invite_id'], ['invites.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('history_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_history_logs_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_history_logs_timestamp'), ['timestamp'], unique=False)

    op.create_table('invite_usages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invite_id', sa.Integer(), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('plex_user_uuid', sa.String(length=255), nullable=True),
    sa.Column('plex_username', sa.String(length=255), nullable=True),
    sa.Column('plex_email', sa.String(length=120), nullable=True),
    sa.Column('plex_thumb', sa.String(length=512), nullable=True),
    sa.Column('plex_auth_successful', sa.Boolean(), nullable=True, server_default=sa.false()), # Added server_default
    sa.Column('discord_user_id', sa.String(length=255), nullable=True),
    sa.Column('discord_username', sa.String(length=255), nullable=True),
    sa.Column('discord_auth_successful', sa.Boolean(), nullable=True, server_default=sa.false()), # Added server_default
    sa.Column('pum_user_id', sa.Integer(), nullable=True),
    sa.Column('accepted_invite', sa.Boolean(), nullable=True, server_default=sa.false()), # Added server_default
    sa.Column('status_message', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['invite_id'], ['invites.id'], ),
    sa.ForeignKeyConstraint(['pum_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - START ###
    op.drop_table('invite_usages')
    with op.batch_alter_table('history_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_history_logs_timestamp'))
        batch_op.drop_index(batch_op.f('ix_history_logs_event_type'))
    op.drop_table('history_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_plex_uuid'))
        batch_op.drop_index(batch_op.f('ix_users_plex_username'))
        batch_op.drop_index(batch_op.f('ix_users_plex_user_id'))
    op.drop_table('users')
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_invites_token'))
        batch_op.drop_index(batch_op.f('ix_invites_is_active'))
        batch_op.drop_index(batch_op.f('ix_invites_custom_path'))
    op.drop_table('invites')
    with op.batch_alter_table('settings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_settings_key'))
    op.drop_table('settings')
    with op.batch_alter_table('admin_accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_admin_accounts_username'))
    op.drop_table('admin_accounts')
    # ### end Alembic commands ###